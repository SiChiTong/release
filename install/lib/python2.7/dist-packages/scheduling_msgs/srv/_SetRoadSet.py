# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scheduling_msgs/SetRoadSetRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import scheduling_msgs.msg

class SetRoadSetRequest(genpy.Message):
  _md5sum = "f0c8a1cc957c6d13faaa5f73701c90d5"
  _type = "scheduling_msgs/SetRoadSetRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 agvID
scheduling_msgs/RoadSet[] roadsets

================================================================================
MSG: scheduling_msgs/RoadSet
geometry_msgs/Pose2D start
geometry_msgs/Pose2D end

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta"""
  __slots__ = ['agvID','roadsets']
  _slot_types = ['int32','scheduling_msgs/RoadSet[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agvID,roadsets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetRoadSetRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.agvID is None:
        self.agvID = 0
      if self.roadsets is None:
        self.roadsets = []
    else:
      self.agvID = 0
      self.roadsets = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.agvID))
      length = len(self.roadsets)
      buff.write(_struct_I.pack(length))
      for val1 in self.roadsets:
        _v1 = val1.start
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        _v2 = val1.end
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.roadsets is None:
        self.roadsets = None
      end = 0
      start = end
      end += 4
      (self.agvID,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roadsets = []
      for i in range(0, length):
        val1 = scheduling_msgs.msg.RoadSet()
        _v3 = val1.start
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.end
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        self.roadsets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.agvID))
      length = len(self.roadsets)
      buff.write(_struct_I.pack(length))
      for val1 in self.roadsets:
        _v5 = val1.start
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
        _v6 = val1.end
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.roadsets is None:
        self.roadsets = None
      end = 0
      start = end
      end += 4
      (self.agvID,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.roadsets = []
      for i in range(0, length):
        val1 = scheduling_msgs.msg.RoadSet()
        _v7 = val1.start
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.end
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _struct_3d.unpack(str[start:end])
        self.roadsets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3d = struct.Struct("<3d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scheduling_msgs/SetRoadSetResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetRoadSetResponse(genpy.Message):
  _md5sum = "49ceb5b32ea3af22073ede4a0328249e"
  _type = "scheduling_msgs/SetRoadSetResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 feedback
"""
  __slots__ = ['feedback']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetRoadSetResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.feedback is None:
        self.feedback = 0
    else:
      self.feedback = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.feedback))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.feedback,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.feedback))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.feedback,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class SetRoadSet(object):
  _type          = 'scheduling_msgs/SetRoadSet'
  _md5sum = '41789a451e3fffe698a3671dfc57117c'
  _request_class  = SetRoadSetRequest
  _response_class = SetRoadSetResponse
