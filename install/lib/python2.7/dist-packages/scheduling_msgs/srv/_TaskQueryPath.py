# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scheduling_msgs/TaskQueryPathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class TaskQueryPathRequest(genpy.Message):
  _md5sum = "be441230fa3ef5d48dbb932d19f7a2e3"
  _type = "scheduling_msgs/TaskQueryPathRequest"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 agvID
string agvName
geometry_msgs/PoseStamped agvPos
geometry_msgs/PoseStamped goalPos

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','agvID','agvName','agvPos','goalPos']
  _slot_types = ['std_msgs/Header','int32','string','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,agvID,agvName,agvPos,goalPos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskQueryPathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.agvID is None:
        self.agvID = 0
      if self.agvName is None:
        self.agvName = ''
      if self.agvPos is None:
        self.agvPos = geometry_msgs.msg.PoseStamped()
      if self.goalPos is None:
        self.goalPos = geometry_msgs.msg.PoseStamped()
    else:
      self.header = std_msgs.msg.Header()
      self.agvID = 0
      self.agvName = ''
      self.agvPos = geometry_msgs.msg.PoseStamped()
      self.goalPos = geometry_msgs.msg.PoseStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.agvID))
      _x = self.agvName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.agvPos.header.seq, _x.agvPos.header.stamp.secs, _x.agvPos.header.stamp.nsecs))
      _x = self.agvPos.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.agvPos.pose.position.x, _x.agvPos.pose.position.y, _x.agvPos.pose.position.z, _x.agvPos.pose.orientation.x, _x.agvPos.pose.orientation.y, _x.agvPos.pose.orientation.z, _x.agvPos.pose.orientation.w, _x.goalPos.header.seq, _x.goalPos.header.stamp.secs, _x.goalPos.header.stamp.nsecs))
      _x = self.goalPos.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.goalPos.pose.position.x, _x.goalPos.pose.position.y, _x.goalPos.pose.position.z, _x.goalPos.pose.orientation.x, _x.goalPos.pose.orientation.y, _x.goalPos.pose.orientation.z, _x.goalPos.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.agvPos is None:
        self.agvPos = geometry_msgs.msg.PoseStamped()
      if self.goalPos is None:
        self.goalPos = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.agvID,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agvName = str[start:end].decode('utf-8')
      else:
        self.agvName = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.agvPos.header.seq, _x.agvPos.header.stamp.secs, _x.agvPos.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agvPos.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.agvPos.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.agvPos.pose.position.x, _x.agvPos.pose.position.y, _x.agvPos.pose.position.z, _x.agvPos.pose.orientation.x, _x.agvPos.pose.orientation.y, _x.agvPos.pose.orientation.z, _x.agvPos.pose.orientation.w, _x.goalPos.header.seq, _x.goalPos.header.stamp.secs, _x.goalPos.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goalPos.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goalPos.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goalPos.pose.position.x, _x.goalPos.pose.position.y, _x.goalPos.pose.position.z, _x.goalPos.pose.orientation.x, _x.goalPos.pose.orientation.y, _x.goalPos.pose.orientation.z, _x.goalPos.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.agvID))
      _x = self.agvName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.agvPos.header.seq, _x.agvPos.header.stamp.secs, _x.agvPos.header.stamp.nsecs))
      _x = self.agvPos.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.agvPos.pose.position.x, _x.agvPos.pose.position.y, _x.agvPos.pose.position.z, _x.agvPos.pose.orientation.x, _x.agvPos.pose.orientation.y, _x.agvPos.pose.orientation.z, _x.agvPos.pose.orientation.w, _x.goalPos.header.seq, _x.goalPos.header.stamp.secs, _x.goalPos.header.stamp.nsecs))
      _x = self.goalPos.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.goalPos.pose.position.x, _x.goalPos.pose.position.y, _x.goalPos.pose.position.z, _x.goalPos.pose.orientation.x, _x.goalPos.pose.orientation.y, _x.goalPos.pose.orientation.z, _x.goalPos.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.agvPos is None:
        self.agvPos = geometry_msgs.msg.PoseStamped()
      if self.goalPos is None:
        self.goalPos = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.agvID,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agvName = str[start:end].decode('utf-8')
      else:
        self.agvName = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.agvPos.header.seq, _x.agvPos.header.stamp.secs, _x.agvPos.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agvPos.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.agvPos.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.agvPos.pose.position.x, _x.agvPos.pose.position.y, _x.agvPos.pose.position.z, _x.agvPos.pose.orientation.x, _x.agvPos.pose.orientation.y, _x.agvPos.pose.orientation.z, _x.agvPos.pose.orientation.w, _x.goalPos.header.seq, _x.goalPos.header.stamp.secs, _x.goalPos.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goalPos.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goalPos.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goalPos.pose.position.x, _x.goalPos.pose.position.y, _x.goalPos.pose.position.z, _x.goalPos.pose.orientation.x, _x.goalPos.pose.orientation.y, _x.goalPos.pose.orientation.z, _x.goalPos.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_7d3I = struct.Struct("<7d3I")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scheduling_msgs/TaskQueryPathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TaskQueryPathResponse(genpy.Message):
  _md5sum = "0db582a4935d3bc49856c29685c12988"
  _type = "scheduling_msgs/TaskQueryPathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool isValid
int32 pathID
string pathTopic
int32 bufferID

"""
  __slots__ = ['isValid','pathID','pathTopic','bufferID']
  _slot_types = ['bool','int32','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isValid,pathID,pathTopic,bufferID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskQueryPathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isValid is None:
        self.isValid = False
      if self.pathID is None:
        self.pathID = 0
      if self.pathTopic is None:
        self.pathTopic = ''
      if self.bufferID is None:
        self.bufferID = 0
    else:
      self.isValid = False
      self.pathID = 0
      self.pathTopic = ''
      self.bufferID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bi.pack(_x.isValid, _x.pathID))
      _x = self.pathTopic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.bufferID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.isValid, _x.pathID,) = _struct_Bi.unpack(str[start:end])
      self.isValid = bool(self.isValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pathTopic = str[start:end].decode('utf-8')
      else:
        self.pathTopic = str[start:end]
      start = end
      end += 4
      (self.bufferID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bi.pack(_x.isValid, _x.pathID))
      _x = self.pathTopic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.bufferID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.isValid, _x.pathID,) = _struct_Bi.unpack(str[start:end])
      self.isValid = bool(self.isValid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pathTopic = str[start:end].decode('utf-8')
      else:
        self.pathTopic = str[start:end]
      start = end
      end += 4
      (self.bufferID,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_Bi = struct.Struct("<Bi")
class TaskQueryPath(object):
  _type          = 'scheduling_msgs/TaskQueryPath'
  _md5sum = '3fda7de461c4194d724c2408e8af4317'
  _request_class  = TaskQueryPathRequest
  _response_class = TaskQueryPathResponse
