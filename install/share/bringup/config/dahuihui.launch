<?xml version="1.0"?>
<launch>
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>
 
    <node name="system_shell" pkg="system_shell" type="system_shell" output="screen">
        <rosparam>
            time_duration: 7.0
            string_prefix: lxterminal -e 'bash -c "source /opt/ros/indigo/setup.bash; source ~/catkin_ws/devel/setup.bash; "
            init_cmd: startup
        </rosparam>
    </node>

    <node name="tf_base_footprint" pkg="tf_broadcaster" type="tf_broadcaster" output="screen">
        <rosparam>
            pub_rate: 20
            frame_id: base_footprint
            z: 0.04
        </rosparam>
    </node>

    <node name="tf_base_laser" pkg="tf_broadcaster" type="tf_broadcaster" output="screen">
        <rosparam>
            pub_rate: 20
            child_frame_id: base_laser
            x: 0.12
            z: 0.18
        </rosparam>
    </node>

    <node name="tf_base_imu" pkg="tf_broadcaster" type="tf_broadcaster" output="screen">
        <rosparam>
            pub_rate: 20
            child_frame_id: base_imu
            x: 0.0
            y: 0.0
            z: 0.0
        </rosparam>
    </node>

    <node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher" output="screen"/>
 
    <node name="aqmd_driver" pkg="aqmd_driver" type="aqmd_driver" output="screen">
        <rosparam>
            is_pub_tf: false
            wheel_mode: omni
            wheel_separation: 0.234
            tty_name: /dev/ttyUSB0
            encoder_freq: 20.0
        </rosparam>
    </node>

    <node name="teleop_keyboard" pkg="teleop_keyboard" type="teleop_keyboard" output="screen"/>

    <node name="urg_node" pkg="urg_node" type="urg_node" output="screen">
        <rosparam>
            ip_address: 192.168.0.10
            frame_id: base_laser
            skip: 1
        </rosparam>
    </node>

    <node name="scan_filter" pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen">
        <rosparam>
            scan_filter_chain:
            - type: laser_filters/LaserArrayFilter
              name: laser_median_filter
              params: 
                range_filter_chain:
                  - name: median_5
                    type: filters/MultiChannelMedianFilterFloat 
                    params:
                      number_of_observations: 5
                      unused: 10
                intensity_filter_chain:
                  - name: median_5
                    type: filters/MultiChannelMedianFilterFloat 
                    params:
                      number_of_observations: 5
                      unused: 10
        </rosparam>
    </node>

    <node name="scan_rectifier" pkg="scan_rectifier" type="scan_rectifier" output="screen">
        <remap from="scan_input" to="scan_filtered"/>
        <remap from="scan_output" to="scan_rectified"/>
        <rosparam>
            max_range: 20.0
        </rosparam>
    </node>

    <node name="robot_pose_ekf" pkg="robot_pose_ekf" type="robot_pose_ekf">
        <remap from="imu_data" to="gyro"/>
        <rosparam>
            output_frame: odom
            base_footprint_frame: base_footprint
            freq: 20.0
            sensor_timeout: 1.0
            odom_used: true
            imu_used: true
            vo_used: false
        </rosparam>
    </node>

    <node name="map_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map.yaml"/>

    <node name="map_edit_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map_edit.yaml" >
        <remap from="map" to="initmap"/>
    </node>
<!--
    <node name="slam_gmapping" pkg="gmapping" type="slam_gmapping" output="screen">
        <remap from="scan" to="scan_rectified"/>
        <rosparam>
            maxUrange: 19.9
            xmin: -20.0
            ymin: -20.0
            xmax: 20.0
            ymax: 20.0
            #transform_publish_period: 0.0
            maxRange: 20.0
        </rosparam>
    </node>
-->
    <node name="hector_mapping" pkg="hector_mapping" type="hector_mapping" output="screen">
        <rosparam>
            map_frame: map
            map_resolution: 0.075
            #pub_map_odom_transform: false
            pub_map_scanmatch_transform: false
            use_initial_map: true
        </rosparam>
    </node>
<!--
    <node name="amcl" pkg="amcl" type="amcl" output="screen">
        <remap from="scan" to="scan_rectified" />
        <rosparam>
            use_map_topic: true
            #odom_model_type: omni
            #tf_broadcast: false
        </rosparam>
    </node>
-->
    <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
        <rosparam>
            base_global_planner: global_planner/GlobalPlanner
            base_local_planner: dwa_local_planner/DWAPlannerROS
            recovery_behaviors:
              - name: 'conservative_reset'
                type: 'clear_costmap_recovery/ClearCostmapRecovery'
              - name: 'aggressive_reset'
                type: 'clear_costmap_recovery/ClearCostmapRecovery'
            conservative_reset:
                reset_distance: 3.0
                layer_names: [obstacle_layer]
            aggressive_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer]
            controller_frequency: 5.0
            planner_patience: 0.5
            controller_patience: 0.5
            #recovery_behavior_enabled: false
            clearing_rotation_allowed: false
            global_costmap:
                global_frame: map
                robot_base_frame: base_link
                transform_tolerance: 0.5
                update_frequency: 1.0
                publish_frequency: 0.1
                static_map: true
                robot_radius: 0.25
                resolution: 0.075
                plugins:
                  - name: static_layer
                    type: "costmap_2d::StaticLayer"
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                static_layer:
                    map_topic: map_edit
                obstacle_layer:
                    observation_sources: scan_rectified
                    scan_rectified:
                        data_type: LaserScan
                        clearing: true
                        inf_is_valid: true
                    track_unknown_space: true
            local_costmap:
                global_frame: odom
                robot_base_frame: base_link
                transform_tolerance: 0.5
                update_frequency: 5.0
                publish_frequency: 0.5
                robot_radius: 0.25
                static_map: false
                rolling_window: true
                width: 3.0
                height: 3.0
                resolution: 0.075
                plugins:
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                obstacle_layer:
                    observation_sources: scan_rectified
                    scan_rectified:
                        data_type: LaserScan
                        clearing: true
                        inf_is_valid: true
                    track_unknown_space: true
            GlobalPlanner:
                allow_unknown: false
            TrajectoryPlannerROS:
                holonomic_robot: false #true
                dwa: true
            DWAPlannerROS:
                max_trans_vel: 0.5
                min_trans_vel: 0.1
                max_vel_x: 0.5
                min_vel_x: 0.0
                max_vel_y: 0.0
                min_vel_y: 0.0
                sim_granularity: 0.075
        </rosparam>
    </node>
<!--
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find rplidar_ros)/rviz/rplidar.rviz"/>
 -->
</launch>